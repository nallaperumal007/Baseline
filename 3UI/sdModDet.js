// this source generated by GenAI pythonProject
import React from "react";
import moment from "moment";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Swal from "sweetalert2";
import Colors from "../../constants/colors";
import styles from "../../styles/createcom2.module.css";
import CustomInput from "../customInput/customInput";
import SampleHelper from "../../helper/sdlcMgmt/sdModDet";
import sdDdHelper from "../../helper/sdlcMgmt/sdDdLookup";
import PfUserActivityDet from "../../helper/pfmMgmt/pfUserActivityDet";
import validate from "../../validation/dataValidate";


export default class sdModDet extends React.Component {
  constructor(props) {
    super(props);
    const stateData = {
      tnnt_id: global.config.tnnt_id,
      username: "",
      role_id: global.config.user_role,
      is_loading: false,
      selectedData: undefined,
      editable: undefined,
      com_id:2,
      is_active: true,
      id: "",
      // task_1 : variable_declare

      text_mod_name: "",
      text_descr: "",
      int_proj_id: undefined,
      int_mod_imp_status_id: undefined,
      arr_status: [],
      array_SdlcProject: [],
    };
    if (props.data !== undefined) {
      stateData.editable = props.editable;
      stateData.id = props.data;
    }

    this.state = {
      ...stateData,
    };
  }
  componentDidMount() {
    const { editable } = this.state;
    const username = global.config.username;
    const ms_id = "1";
    if (username != null && username !== undefined) {
      this.setState({
        username: username,
        tnnt_id: global.config.tnnt_id,
      });
    }
    this.getForDropDownProj();
    this.getImpStatusDd();
    editable !== undefined && this.getRecord();
    const user_name = global.config.username;
    const created_by = username;
    const tnnt_id = global.config.tnnt_id;
    PfUserActivityDet.insertRecord({ user_name, ms_id, created_by, tnnt_id })
      .then((response) => {
        // Handle success response
        console.log("Data inserted successfully:", response);
      })
      .catch((error) => {
        console.error("Error inserting data:", error);
      });

  }

  getForDropDownProj() {
    const {
        tnnt_id,
    } = this.state;

    const filter = {
        tnnt_id: tnnt_id,
        is_active: 'active',
    };

    sdDdHelper.getForDropDown(filter)
    .then((data) => {
        this.setState({ array_SdlcProject: data });
    })
    .catch((err) => {
        console.log(err);
    })
}

  getImpStatusDd() {
    const filter = {
        tnnt_id:  global.config.tnnt_id,
        is_active: 'active',
    };
  
    sdDdHelper.getSdImpStatus(filter)
        .then((data) => {
            this.setState({ arr_status: data });
        })
        .catch((err) => {
            console.log(err);
        })
  }

  getRecord() {
    const { id, tnnt_id } = this.state;

    const filter = {
      id: id,
      tnnt_id: tnnt_id,
    };

    SampleHelper.getRecord(filter)
      .then((data) => {
        this.setState({
          // update the state of the component
        text_mod_name: data[0].mod_name,
        text_descr: data[0].descr,
        int_proj_id: data[0].proj_id,
        proj_name: data[0].proj_name,
        int_mod_imp_status_id: data[0].mod_imp_status_id,
        imp_status_name: data[0].imp_status_name,
        is_active: data[0].is_active == "active" ? true : false,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  async insertRecord() {
    const {
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_mod_name,
      text_descr,
      int_proj_id,
      int_mod_imp_status_id,


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation

      if (!validate.validateMandText(text_mod_name)) {
        alertText += ".Module Name\n"
      }
      if (!validate.validateMandTextOnly(text_mod_name)) {
        alertText += ".Invalid Module Name\n"
      }
      if (!validate.validateMandNumber(int_proj_id)) {
        alertText += ".Project Name\n"
      }
      if (!validate.validateMandNumber(int_mod_imp_status_id)) {
        alertText += ".Implementation Status\n"
      } 



      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        // task_3 : add more properties to data

        mod_name: text_mod_name,
        descr: text_descr,
        proj_id: int_proj_id,
        mod_imp_status_id: int_mod_imp_status_id,


        lc_status_id: 1,
        created_by: username,
        tnnt_id: tnnt_id,
      };

      this.setState({ is_loading: true });
      SampleHelper.insertRecord(data)
        .then((data) => {
          if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + data.id + " created successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  async updateRecord() {
    const {
      id,
      is_active,
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_mod_name,
      text_descr,
      int_proj_id,
      int_mod_imp_status_id,


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (!validate.validateMandText(text_mod_name)) {
        alertText += ".Module Name\n"
      }
      if (!validate.validateMandTextOnly(text_mod_name)) {
        alertText += ".Invalid Module Name\n"
      }
      if (!validate.validateMandNumber(int_proj_id)) {
        alertText += ".Project Name\n"
      }
      if (!validate.validateMandNumber(int_mod_imp_status_id)) {
        alertText += ".Implementation Status\n"
      } 


      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        id: id,
        // task_3 : add more properties to data

        mod_name: text_mod_name,
        descr: text_descr,
        proj_id: int_proj_id,
        mod_imp_status_id: int_mod_imp_status_id,



        lc_status_id: 1,
        is_active: is_active == false ? "inactive" : "active",
        created_by: username,
        tnnt_id: tnnt_id,
      };

      this.setState({ is_loading: true });
      SampleHelper.updateRecord(data)
        .then((data) => {
          if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + id + " updated successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: true });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  render() {
    const { setVisibility } = this.props;
    const {
      editable,
      is_loading,
      is_active,
      // task_2 : all declared variable add here

      text_mod_name,
      text_descr,
      int_proj_id,
      int_mod_imp_status_id,
      arr_status,
      array_SdlcProject,
      proj_name,
      imp_status_name,
    } = this.state;


    return (
      <div className={styles.mainWrapper}>
        {is_loading && (
          <div className={"loadingWrapper"}>
            <div className={"innerLoadingWrapper"}>
              <div class="bouncing-loader">
                <div></div>
                <div></div>
                <div></div>
              </div>
            </div>
          </div>
        )}

        <div className={styles.wrapper} onClick={(e) => e.stopPropagation()}>
          <img
            src="/assets/close-red.png"
            className={styles.closeButton}
            onClick={() => setVisibility(false)}
          />
          <div>
            <p className={styles.title}>
              {editable == undefined ? "Create Record" : editable ? "Update Record" : "View Record"}
            </p>
            {/*// task_4 : build logic per column and specific to data type.*/}
            
          <div className={styles.divMain2}>
           <fieldset className={styles.fieldsetWrapper}>
           <legend className={styles.legendsWrapper1}>Basic Details</legend>
             <div className={styles.sideWrapper}>

             <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
  {/* Module Name Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
  <div style={{ display: 'flex', alignItems: 'center' }}>
    <p style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
      Module Name:
      <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
    </p>
    {editable !== false ? (
      <div style={{ flexGrow: 1, position: 'relative' }}>
        <CustomInput
          inputType="text"
          value={text_mod_name}
          onChange={(e) => this.setState({ text_mod_name: e.target.value })}
          style={{
            borderColor: 'blue',
            backgroundColor: 'white',
            width: '100%',
            display: 'inline-block',
            padding: '10px',
            boxSizing: 'border-box',
            fontSize: '16px',
          }}
        />
      </div>
    ) : (
      <div>
        <p>{text_mod_name}</p>
      </div>
    )}
  </div>
  {editable !== false && (
    <div style={{ textAlign: 'right', marginTop: '5px', fontWeight: 'bold', color: '#555' }}>
      ({text_mod_name.length}/60)
    </div>
  )}
  {text_mod_name.length > 60 && (
    <p style={{ color: 'red', fontSize: '12px', marginTop: '5px' }}>
      Module Name cannot be more than 60 characters.
    </p>
  )}
</div>

  {/* Description Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <p style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
        Description:
        <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
      </p>
      {editable !== false ? (
        <div style={{ flexGrow: 1, position: 'relative' }}>
          <textarea
            value={text_descr}
            onChange={(e) => this.setState({ text_descr: e.target.value })}
            style={{
              backgroundColor: 'white',
              border: '2px solid blue',
              width: '100%',
              height: '100px',
              resize: 'none',
              padding: '10px',
              boxSizing: 'border-box',
              fontSize: '16px',
              fontFamily: 'Arial, sans-serif',
            }}
          />
        </div>
      ) : (
        <div>
          <p>{text_descr}</p>
        </div>
      )}
    </div>
    {editable !== false && (
      <div style={{ textAlign: 'right', marginTop: '5px', fontWeight: 'bold', color: '#555' }}>
        ({text_descr.length}/1000)
      </div>
    )}
    {text_descr.length > 1000 && (
      <p style={{ color: 'red', fontSize: '12px', marginTop: '5px' }}>
        Description cannot be more than 1000 characters.
      </p>
    )}
  </div>
{/* Project Name Section */}
<div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
  <div style={{ display: 'flex', alignItems: 'center' }}>
    <p style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
      Project Name:
      <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
    </p>
    {editable !== false ? (
      <select
        value={int_proj_id === undefined ? 0 : int_proj_id}
        onChange={(e) => this.setState({ int_proj_id: e.target.value })}
        style={{
          borderColor: 'blue',
          backgroundColor: 'white',
          flexGrow: 1,
          padding: '10px',
          boxSizing: 'border-box',
          fontSize: '16px',
        }}
      >
        <option value={0} disabled>
          {"Select Project"}
        </option>
        {array_SdlcProject.map((s) => (
          <option value={s.id} key={s.id}>{s.name}</option>
        ))}
      </select>
    ) : (
      <div>
        <p>{proj_name}</p>
      </div>
    )}
  </div>
</div>

{/* Implementation Status Section */}
<div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
  <div style={{ display: 'flex', alignItems: 'center' }}>
    <p style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
      Status:
      <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
    </p>
    {editable !== false ? (
      <select
        value={int_mod_imp_status_id === undefined ? 0 : int_mod_imp_status_id}
        onChange={(e) => this.setState({ int_mod_imp_status_id: e.target.value })}
        style={{
          borderColor: 'blue',
          backgroundColor: 'white',
          flexGrow: 1,
          padding: '10px',
          boxSizing: 'border-box',
          fontSize: '16px',
        }}
      >
        <option value={0} disabled>
          {"Select Implementation Status"}
        </option>
        {arr_status.map((s) => (
          <option value={s.id} key={s.id}>{s.name}</option>
        ))}
      </select>
    ) : (
      <div>
        <p>{imp_status_name}</p>
      </div>
    )}
  </div>
</div>

</div>

                        </div>
    </fieldset>
                            
                 </div>

            <div className={styles.inputAlignment}>
              <p className={`mandatory`}><span style={{ color: "red", marginLeft: "3px", fontSize: "15px" }}>* are mandatory fields</span></p>
            </div>
            <div
              className={styles.inputAlignment}
              style={{
                justifyContent: "space-around",
                display: "flex",
              }}
            >
              {editable !== undefined && (
                <div>
                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={is_active}
                      onChange={(e) =>
                        this.setState({
                          is_active: e.target.checked,
                        })
                      }
                      disabled={editable == false}
                    />
                    <span className="slider round"></span>
                  </label>
                  <p className={styles.statusText}>
                    {is_active ? "Active" : "Inactive"}
                  </p>
                </div>
              )}
            </div>
            {editable != false && (
              <div className={styles.button}>
                <button
                  className={`button`}
                  onClick={() =>
                    editable == undefined
                      ? this.insertRecord()
                      : editable && this.updateRecord()
                  }
                >
                  {editable == undefined ? "Create" : editable && "Update"}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
}