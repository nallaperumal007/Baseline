// this source generated by GenAI v2.9.4 
import React from "react";
import moment from "moment";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Swal from "sweetalert2";
import Colors from "../../constants/colors";
import styles from "../../styles/createcom.module.css";
import CustomInput from "../customInput/customInput";
import SampleHelper from "../../helper/pfmMgmt/pfMachineM1Det";
import Helper from "../../helper/pfmMgmt/pfConstOption";
import PfWfdHelper from "../../helper/pfmMgmt/pfWFDet";

export default class PfMachineM1Det extends React.Component {
  constructor(props) {
    super(props);
    const stateData = {
      tnnt_id: global.config.tnnt_id,
      username: "",
      role_id: global.config.user_role,
      is_loading: false,
      selectedData: undefined,
      editable: undefined,
      com_id: 505,
      is_active: true,
      id: "",
      // task_1 : variable_declare

      text_machine_nr: "",
      warranty_dur: "",
      int_clt_id: "",
      date_installation_date: "",
      text_installed_by: "",
      date_warranty_end_date: "",
      arr_model: [],
      id_selectedmodel: undefined,

      //WorkFlow Engine
      num_old_wfs: 1,
      access_role_user: global.config.access_role_list,
      bl_role_user: "",
      id_selectedVerify: undefined,
      arr_verify: [],
      editableOrder: false,
    };
    if (props.data !== undefined) {
      stateData.editable = props.editable;
      stateData.editableOrder = props.editableOrder;
      stateData.id = props.data;
    }

    this.state = {
      ...stateData,
    };
  }
  componentDidMount() {
    const { editable, editableOrder, num_old_wfs } = this.state;
    const username = global.config.username;
    if (username != null && username !== undefined) {
      this.setState({
        username: username,
        tnnt_id: global.config.tnnt_id,
      });
    }
    console.log(global.config.access_role_list)
    this.getDropDownModel();
    editable !== undefined && this.getRecord();

    editable == undefined && this.getWfa(num_old_wfs);
    (editableOrder || editable) && this.getOrderTranst();
  }

  getRecord() {
    const { id, tnnt_id, editableOrder } = this.state;

    const filter = {
      id: id,
      tnnt_id: tnnt_id,
    };
    if (editableOrder == true) {

      SampleHelper.getRecordForOrder(filter)
        .then((data) => {
          this.setState({
            // update the state of the component
            text_machine_nr: data[0].machine_nr,
            warranty_dur: data[0].warranty_dur,
            id_selectedmodel: data[0].model_type_id,
            int_clt_id: data[0].clt_id,
            installation_date: data[0].installation_date === null ? null : new Date(moment(data[0].installation_date, "DD/MMM/YYYY").format("DD/MMM/YYYY")),
            text_installed_by: data[0].installed_by,
            warranty_end_date: data[0].warranty_end_date === null ? null : new Date(moment(data[0].warranty_end_date, "DD/MMM/YYYY").format("DD/MMM/YYYY")),
            is_active: data[0].is_active == "active" ? true : false,
            num_old_wfs: data[0].next_wfs_id,
          });
        })
        .catch((err) => {
          console.log(err);
        });
    } else {

      SampleHelper.getRecord(filter)
        .then((data) => {
          this.setState({
            // update the state of the component
            text_machine_nr: data[0].machine_nr,
            warranty_dur: data[0].warranty_dur,
            id_selectedmodel: data[0].model_type_id,
            int_clt_id: data[0].clt_id,
            installation_date: data[0].installation_date === null ? null : new Date(moment(data[0].installation_date, "DD/MMM/YYYY").format("DD/MMM/YYYY")),
            text_installed_by: data[0].installed_by,
            warranty_end_date: data[0].warranty_end_date === null ? null : new Date(moment(data[0].warranty_end_date, "DD/MMM/YYYY").format("DD/MMM/YYYY")),
            is_active: data[0].is_active == "active" ? true : false,
            num_old_wfs: data[0].next_wfs_id,
          });
        })
        .catch((err) => {
          console.log(err);
        });
    }
  }

  getDropDownModel() {
    const { tnnt_id } = this.state;
    const filter = {
      tnnt_id: tnnt_id,
      intl_id: 'model_type'
    }
    Helper.getConstOptions(filter)
      .then((data) => {
        this.setState({ arr_model: data });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  getOrderTranst() {
    const { id, tnnt_id, com_id, num_old_wfs } = this.state;

    const filter = {
      rec_id: id,
      tnnt_id: tnnt_id,
      com_id: com_id,
      is_active: "active",
    };
    PfWfdHelper.getOrderTranst(filter)
      .then((data) => {
        if (data[0].next_wfs_id == 2) {
          this.setState({
            id_selectedVerify: 4,
          });
          this.getWfa(num_old_wfs);
        } else if (data[0].next_wfs_id == 3) {
          this.setState({
            id_selectedVerify: 3,
          });
          this.getWfa(num_old_wfs);
        } else {
          this.getWfa(data[0].next_wfs_id);
        }
      })
      .catch((err) => {
        console.log(err);
      });
  }

  getWfa(num_old_wfs) {
    const { com_id, tnnt_id, access_role_user, stateData } = this.state;

    const filter = {
      com_id: com_id,
      tnnt_id: tnnt_id,
      old_wfs_id: num_old_wfs,
      is_active: "active",
    };

    PfWfdHelper.getWfa(filter)
      .then((data) => {
        console.log(data)
        const access_role_list = data[0].access_role_users_list;
        // const role_id = parseInt(access_role_user);
        const role_id = access_role_user.split(";").map((id) => parseInt(id));
        const roleIds = access_role_list.split(";").map((id) => parseInt(id));
        // const isRoleAllowed = roleIds.includes(role_id);
        const isRoleAllowed = role_id.some((id) => roleIds.includes(id));

        this.setState({
          arr_verify: data,
          bl_role_user: isRoleAllowed,
          id_selectedVerify: num_old_wfs == 1 ? data[0].next_wfs_id : undefined,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  async insertRecord() {
    const {
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_machine_nr,
      warranty_dur,
      id_selectedmodel,
      int_clt_id,
      date_installation_date,
      text_installed_by,
      date_warranty_end_date,
      arr_verify,
      id_selectedVerify,
      bl_role_user,
    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (id_selectedVerify === "") {
        alertText += ". Verificication\n";
      }
      if (text_machine_nr === "") {
        alertText += ".Machine Nr\n ";
      }
      if (warranty_dur === "") {
        alertText += ".Warranty dur\n ";
      }
      if (id_selectedmodel === undefined) {
        alertText += ".Model Type\n ";
      }

      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        // task_3 : add more properties to data

        machine_nr: text_machine_nr,
        warranty_dur: warranty_dur,
        model_type_id: id_selectedmodel,
        clt_id: int_clt_id == 0 ? "" : int_clt_id,
        installation_date: date_installation_date ? moment(date_installation_date).format("YYYY-MMM-DD") : null,
        installed_by: text_installed_by,
        warranty_end_date: date_warranty_end_date ? moment(date_warranty_end_date).format("YYYY-MMM-DD") : null,
        // lc_status_id: 1,
        created_by: username,
        tnnt_id: tnnt_id,
        next_wfs_id: id_selectedVerify,
      };

      data.arr_wfs = arr_verify;
      data.arr_wfs[0].user_name = username;

      this.setState({ is_loading: true });
      SampleHelper.insertRecord(data)
        .then((data) => {
          if ((data.code == 200) & (id_selectedVerify === 2)) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + data.id + " created successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          } else if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text:
                "Your record ID " +
                data.id +
                " is being reviewed & once approved you will be able to view the record!!",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  async updateRecord() {
    const {
      id,
      is_active,
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_machine_nr,
      warranty_dur,
      id_selectedmodel,
      int_clt_id,
      date_installation_date,
      text_installed_by,
      date_warranty_end_date,
      arr_verify,
      id_selectedVerify,
      bl_role_user,
      editableOrder,
      com_id,


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (text_machine_nr === "") {
        alertText += ".Machine Nr\n ";
      }
      if (warranty_dur === "") {
        alertText += ".Warranty dur\n ";
      }
      if (id_selectedmodel=== undefined) {
        alertText += ".Model Type\n ";
      }

      if (editableOrder) {
        if (id_selectedVerify === undefined) {
          alertText += ". Verificication";
        }

        if (!bl_role_user) {
          Swal.fire({
            icon: "warning",
            text: "You don't have permission to Verify!!",
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          return;
        }
      }

      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const filter = {
        rec_id: id,
        user_name: username,
        next_wfs_id: 4,
        tnnt_id: tnnt_id,
        is_active: "active",
        com_id: com_id,
      };

      const checkUser = await PfWfdHelper.checkOrderTranst(filter);

      if (!checkUser && id_selectedVerify != 4) {
        await Swal.fire({
          icon: "warning",
          text: "Maker cannot be Checker!!!",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return; // Terminate the loop
      }

      const data = {
        id: id,
        // task_3 : add more properties to data
        machine_nr: text_machine_nr,
        warranty_dur: warranty_dur,
        model_type_id: id_selectedmodel,
        clt_id: int_clt_id == 0 ? "" : int_clt_id,
        installation_date: date_installation_date ? moment(date_installation_date).format("YYYY-MMM-DD") : null,
        installed_by: text_installed_by,
        warranty_end_date: date_warranty_end_date ? moment(date_warranty_end_date).format("YYYY-MMM-DD") : null,
        // lc_status_id: 1,
        is_active: is_active == false ? "inactive" : "active",
        created_by: username,
        tnnt_id: tnnt_id,
        next_wfs_id: id_selectedVerify == undefined ? null : id_selectedVerify,
      };

      data.arr_wfs = arr_verify.filter(
        (item) => item.next_wfs_id == id_selectedVerify
      );
      data.arr_wfs[0].user_name = username;
      data.arr_wfs[0].rec_id = id;

      const alert_message =
        id_selectedVerify == 6
          ? "Order is now ready for six eye verification"
          : id_selectedVerify == 5
            ? "Order has been reject."
            : id_selectedVerify == 7
              ? "Order has been reject."
              : id_selectedVerify == 3
                ? "Order is successfully discarded!!"
                : id_selectedVerify == 2
                  ? "Order is verified and can accessed in Machine Details"
                  : "Your Ventor record is being reviewed & once approved you will be able to see the changes!!";

      this.setState({ is_loading: true });
      SampleHelper.updateRecord(data)
        .then((data) => {
          if (data.code.code == 200) {
            this.props.getData();
            Swal.fire({
              text: alert_message,
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: true });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  render() {
    const { setVisibility } = this.props;
    const {
      editable,
      is_loading,
      is_active,
      text_machine_nr,
      warranty_dur,
      arr_model,
      id_selectedmodel,
      int_clt_id,
      date_installation_date,
      text_installed_by,
      date_warranty_end_date,
      arr_verify,
      id_selectedVerify,
      editableOrder,
    } = this.state;

    return (
      <div className={styles.mainWrapper}>
        {is_loading && (
          <div className={"loadingWrapper"}>
            <div className={"innerLoadingWrapper"}>
              <div class="bouncing-loader">
                <div></div>
                <div></div>
                <div></div>
              </div>
            </div>
          </div>
        )}

        <div className={styles.wrapper} onClick={(e) => e.stopPropagation()}>
          <img
            src="/assets/close-red.png"
            className={styles.closeButton}
            onClick={() => setVisibility(false)}
          />
          <div>
            <p className={styles.title}>
              {editable == undefined ? "Create Record" : editable ? "Update Record" : "View Record"}
            </p>
            {/*// task_4 : build logic per column and specific to data type.*/}
            <div className={styles.sideWrapper}>

              <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                  <p>Machine Nr:<span
                    style={{ color: "red", marginLeft: "3px", fontSize: "20px" }} >
                    *
                  </span>
                  </p>
                  {editable != false ? (
                    <div className={styles.inputCustom}>
                      <CustomInput
                        input type="text"
                        value={text_machine_nr}
                        onChange={(e) =>
                          this.setState({
                            text_machine_nr: e.target.value,
                          })
                        }
                      />
                    </div>
                  ) : (
                    <div className={styles.viewField}>
                      <p>{text_machine_nr}</p>
                    </div>
                  )}
                </div>
              </div>



              <div className={styles.leftWrapper}>
              <div className={styles.inputAlignment}>
                <p>Model type:</p>
                <select
                  value={
                    id_selectedmodel === undefined ? 0 : id_selectedmodel
                  }
                  onChange={(e) =>
                    this.setState({
                      id_selectedmodel: e.target.value,
                    })
                  }
                >
                <option value={0} disabled selected>
                  {"Select Status "}
                </option>
                  {arr_model.map((s) => (
                    <option value={s.id}>{s.option_name}</option>
                  ))}
                </select>
              </div>
               
              </div>

              <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                  <p>Warranty duration(In months):<span
                    style={{ color: "red", marginLeft: "3px", fontSize: "20px" }} >
                    *
                  </span>
                  </p>
                  {editable != false ? (
                    <div className={styles.inputCustom}>
                      <CustomInput
                        input type="int"
                        value={warranty_dur}
                        onChange={(e) =>
                          this.setState({
                            warranty_dur: e.target.value,
                          })
                        }
                      />
                    </div>
                  ) : (
                    <div className={styles.viewField}>
                      <p>{warranty_dur}</p>
                    </div>
                  )}
                </div>
              </div>

              <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                  <p>Client Name:</p>
                  {editable != false ? (
                    <div className={styles.inputCustom}>
                      <CustomInput
                        input type="number"
                        value={int_clt_id}
                        onChange={(e) =>
                          this.setState({
                            int_clt_id: e.target.value,
                          })
                        }
                        disabled
                      />
                    </div>
                  ) : (
                    <div className={styles.viewField}>
                      <p>{int_clt_id}</p>
                    </div>
                  )}
                </div>
              </div>

              <div className={styles.inputAlignment}>
                <p>Installation Date:
                </p>
                {editable != false ? (
                  <div className={styles.inputCustom}>
                    <DatePicker
                      className={styles.date}
                      dateFormat="dd-MMM-yyyy"
                      selected={date_installation_date}
                      onChange={(e) =>
                        this.setState({ date_installation_date: e })
                      }
                      disabled
                    />
                  </div>
                ) : (
                  <div className={styles.viewField}>
                    <p>{date_installation_date ? moment(date_installation_date).format("DD-MMM-YYYY") : ""}</p>
                  </div>
                )}
              </div>

              <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                  <p>Installed By:</p>
                  {editable != false ? (
                    <div className={styles.inputCustom}>
                      <CustomInput
                        input type="text"
                        value={text_installed_by}
                        onChange={(e) =>
                          this.setState({
                            text_installed_by: e.target.value,
                          })
                        }
                        disabled
                      />
                    </div>
                  ) : (
                    <div className={styles.viewField}>
                      <p>{text_installed_by}</p>
                    </div>
                  )}
                </div>
              </div>



              <div className={styles.inputAlignment}>
                <p>Warranty End Date:
                </p>
                {editable != false ? (
                  <div className={styles.inputCustom}>
                    <DatePicker
                      className={styles.date}
                      dateFormat="dd-MM-yyyy"
                      selected={date_warranty_end_date}
                      onChange={(e) =>
                        this.setState({ date_warranty_end_date: e })
                      }
                      disabled
                    />
                  </div>
                ) : (
                  <div className={styles.viewField}>
                    <p>{date_warranty_end_date ? moment(date_warranty_end_date).format("DD-MMM-YYYY") : ""}</p>
                  </div>
                )}
              </div>

            </div>

            <div className={styles.inputAlignment}>
              <p className={`mandatory`}><span style={{ color: "red", marginLeft: "3px", fontSize: "15px" }}>* are mandatory fields</span></p>
            </div>
            <div
              className={styles.inputAlignment}
              style={{
                justifyContent: "space-around",
                display: "flex",
              }}
            >
              {editable !== undefined && (
                <div>
                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={is_active}
                      onChange={(e) =>
                        this.setState({
                          is_active: e.target.checked,
                        })
                      }
                      disabled={editable == false}
                    />
                    <span className="slider round"></span>
                  </label>
                  <p className={styles.statusText}>
                    {is_active ? "Active" : "Inactive"}
                  </p>
                </div>
              )}
            </div>

            <div className={styles.button}>
              {(editableOrder == true || editable != false) && (
                <div className={styles.verifyAlignment}>
                  <div className={styles.inputAlignmentVerify}>
                    <select
                      value={id_selectedVerify}
                      onChange={(e) =>
                        this.setState({
                          id_selectedVerify: e.target.value,
                        })
                      }
                    >
                      <option value={0} disabled selected>
                        {"Select..."}
                      </option>
                      {arr_verify.map((b) => (
                        <option value={b.next_wfs_id}>{b.wfa_name}</option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
              {editableOrder ? (
                <div className={styles.button}>
                  <button
                    className={`button`}
                    onClick={() => this.updateRecord()}
                  >
                    {"Submit"}
                  </button>
                </div>
              ) : (
                editable != false && (
                  <div className={styles.button}>
                    <button
                      className={`button`}
                      onClick={() =>
                        editable == undefined
                          ? this.insertRecord()
                          : editable && this.updateRecord()
                      }
                    >
                      {"Submit"}
                    </button>
                  </div>
                )
              )}
            </div>

            {/* {editable != false && (
              <div className={styles.button}>
                <button
                  className={`button`}
                  onClick={() =>
                    editable == undefined
                      ? this.insertRecord()
                      : editable && this.updateRecord()
                  }
                >
                  {editable == undefined ? "Create" : editable && "Update"}
                </button>
              </div>
            )} */}
          </div>
        </div>
      </div>
    );
  }
}
