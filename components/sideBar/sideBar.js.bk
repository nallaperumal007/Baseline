import React from 'react';
import { Menu } from 'antd';
import PfModuleHelper from "../../helper/pfmMgmt/pfDocModuleDet";
import PfDocMainHelper from "../../helper/pfmMgmt/pfDocMainDet";
// import styles from "./sideBar.module.css";

const getLevelKeys = (items) => {
  const key = {};
  const func = (items, level = 1) => {
    items.forEach((item) => {
      if (item.key) {
        key[item.key] = level;
      }
      if (item.children) {
        func(item.children, level + 1);
      }
    });
  };
  func(items);
  return key;
};

// const levelKeys = getLevelKeys(arr_module_list);

class SideBar extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      access_role_list: global.config.access_role_list,
      tnnt_id: global.config.tnnt_id,
      username: global.config.username,
      stateOpenKeys: ['', ''],
      // arr_module_list: [],
      // levelKeys: '',
      arr_usecase_contect: [],
      levelKeys: getLevelKeys(props.items),
    };
  }

  componentDidMount() {
    const username = global.config.username;
    if (username != null && username !== undefined) {
      this.setState({
        username: username,
        tnnt_id: global.config.tnnt_id,
      });
    }

    this.getModule();
  }

  getModule() {
    const { tnnt_id } = this.state;

    const filter = {
      tnnt_id: tnnt_id,
    };

    PfModuleHelper.getModuleList(filter)
      .then((data) => {

        const formattedData = this.formatFilteredList(data);

        this.setState({
          levelKeys: getLevelKeys(formattedData),
          items: formattedData
        })
      })
      .catch((err) => {
        console.log(err);
      });
  }

  formatFilteredList = (data) => {
    const { access_role_list } = this.state;

    const formatted = [];
    const moduleMap = new Map();
    const hasValidAccess = (accessList) => {
      if (!accessList) return false;
      const accessCodes = accessList.split(';');
      return accessCodes.some(code => access_role_list.includes(code));
    };
    for (const d of data) {
      // Skip if the module's access_list does not match any role in accessRoleList
      if (!hasValidAccess(d.access_list)) {
        continue;
      }

      // Skip if the usecase_id is null
      if (d.usecase_id === null) {
        continue;
      }

      // Check if the module is already in the map
      let module = moduleMap.get(d.module_id);
      if (!module) {
        module = {
          key: d.module_id,
          label: d.module_name,
          children: []
        };
        moduleMap.set(d.module_id, module);
      }

      // Add the usecase as a child to the module
      module.children.push({
        key: d.usecase_id,
        label: d.usecase_name
      });
    }

    // Convert the map to an array
    for (const module of moduleMap.values()) {
      formatted.push(module);
    }

    return formatted;
  };

  onOpenChange = (openKeys) => {
    const { stateOpenKeys, levelKeys } = this.state;
    const currentOpenKey = openKeys.find((key) => stateOpenKeys.indexOf(key) === -1);

    if (currentOpenKey !== undefined) {
      const repeatIndex = openKeys
        .filter((key) => key !== currentOpenKey)
        .findIndex((key) => levelKeys[key] === levelKeys[currentOpenKey]);

      this.setState({
        stateOpenKeys: openKeys
          .filter((_, index) => index !== repeatIndex)
          .filter((key) => levelKeys[key] <= levelKeys[currentOpenKey]),
      });
    } else {
      this.setState({ stateOpenKeys: openKeys });
    }
  };

  handleMenuItemClick = (key) => {
    const { tnnt_id } = this.state;

    const filter = {
      id: key.key,
      tnnt_id: tnnt_id,
    }
    console.log(key.key)
    PfDocMainHelper.getRecord(filter)
      .then((data) => {
        console.log(data)
        this.setState({ arr_usecase_contect: data })
      })
      .catch((err) => {
        console.log(err);
      });
  }
  onClick = ({ key }) => {
    const { onItemSelect } = this.props;
    if (onItemSelect) {
      onItemSelect(key);
    }
  };

  render() {
    const { stateOpenKeys } = this.state;
    const { items } = this.props;

    return (
      <Menu
        mode="inline"
        defaultSelectedKeys={['']}
        openKeys={stateOpenKeys}
        onOpenChange={this.onOpenChange}
        style={{ width: 300 }}
        items={items}
        onClick={this.onClick} 
      />
    );
  }
}

export default SideBar;
