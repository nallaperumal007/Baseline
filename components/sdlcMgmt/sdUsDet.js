// this source generated by GenAI pythonProject
import React from "react";
import moment from "moment";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Swal from "sweetalert2";
import Colors from "../../constants/colors";
import styles from "../../styles/createcom2.module.css";
import CustomInput from "../customInput/customInput";
import DdHelper from "../../helper/sdlcMgmt/sdUsDet";
import SdDdHelper from "../../helper/sdlcMgmt/sdDdLookup";
import PfUserActivityDet from "../../helper/pfmMgmt/pfUserActivityDet";
import validate from "../../validation/dataValidate";




export default class sdUsDet extends React.Component {
  constructor(props) {
    super(props);
    const stateData = {
      tnnt_id: global.config.tnnt_id,
      username: "",
      role_id: global.config.user_role,
      is_loading: false,
      selectedData: undefined,
      editable: undefined,
      com_id:2,
      is_active: true,
      id: "",
      // task_1 : variable_declare

      text_us_name: "",
      text_descr: "",
      int_feat_id: undefined,
      text_us_as_a: "",
      text_us_i_want: "",
      text_us_so_that: "",
      text_us_bus_rational: "",
      text_us_type: "",
      int_templ_id: "",
      int_proj_imp_status_id: undefined,
      array_Feat: [],
      arr_status: [],


    };
    if (props.data !== undefined) {
      stateData.editable = props.editable;
      stateData.id = props.data;
    }

    this.state = {
      ...stateData,
    };
  }
  componentDidMount() {
    const { editable } = this.state;
    const username = global.config.username;
    const ms_id = "1";
    if (username != null && username !== undefined) {
      this.setState({
        username: username,
        tnnt_id: global.config.tnnt_id,
      });
    }
    this.getsdlcFeat();
    this.getImpStatusDd();
    editable !== undefined && this.getRecord();
    const user_name = global.config.username;
    const created_by = username;
    const tnnt_id = global.config.tnnt_id;
    PfUserActivityDet.insertRecord({ user_name, ms_id, created_by, tnnt_id })
      .then((response) => {
        // Handle success response
        console.log("Data inserted successfully:", response);
      })
      .catch((error) => {
        console.error("Error inserting data:", error);
      });



  }

  getsdlcFeat() {
    const {
        tnnt_id,
    } = this.state;

    const filter = {
        tnnt_id: tnnt_id,
        is_active: 'active',
    };

    SdDdHelper.getForDropDown(filter)
        .then((data) => {
            this.setState({ array_Feat: data });
        })
        .catch((err) => {
            console.log(err);
        });
}

getImpStatusDd() {
  const filter = {
      tnnt_id:  global.config.tnnt_id,
      is_active: 'active',
  };

  SdDdHelper.getSdImpStatus(filter)
      .then((data) => {
          this.setState({ arr_status: data });
      })
      .catch((err) => {
          console.log(err);
      })
}

  getRecord() {
    const { id, tnnt_id } = this.state;

    const filter = {
      id: id,
      tnnt_id: tnnt_id,
    };

    DdHelper.getRecord(filter)
      .then((data) => {
        this.setState({
          // update the state of the component
        text_us_name: data[0].us_name,
        text_descr: data[0].descr,
        int_feat_id: data[0].feat_id,
        feat_name: data[0].feat_name,
        text_us_as_a: data[0].us_as_a,
        text_us_i_want: data[0].us_i_want,
        text_us_so_that: data[0].us_so_that,
        text_us_bus_rational: data[0].us_bus_rational,
        text_us_type: data[0].us_type,
        int_templ_id: data[0].templ_id,
        int_proj_imp_status_id: data[0].proj_imp_status_id,
        imp_status_name: data[0].imp_status_name,
        is_active: data[0].is_active == "active" ? true : false,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  async insertRecord() {
    const {
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_us_name,
      text_descr,
      int_feat_id,
      text_us_as_a,
      text_us_i_want,
      text_us_so_that,
      text_us_bus_rational,
      text_us_type,
      int_templ_id,
      int_proj_imp_status_id,


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (!validate.validateMandText(text_us_name)) {
        alertText += ".User Story Name\n"
      }
      if (!validate.validateMandTextOnly(text_us_name)) {
        alertText += ".Invalid User Story Name\n"
      }
      if (!validate.validateMandNumber(int_feat_id)) {
        alertText += ".Feature Name\n"
      } 
      if (!validate.validateMandNumber(int_proj_imp_status_id)) {
        alertText += ".Implementation Status\n"
      } 
            
       


      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        // task_3 : add more properties to data

        us_name: text_us_name,
        descr: text_descr,
        feat_id: int_feat_id,
        us_as_a: text_us_as_a,
        us_i_want: text_us_i_want,
        us_so_that: text_us_so_that,
        us_bus_rational: text_us_bus_rational,
        us_type: text_us_type,
        templ_id: int_templ_id,
        proj_imp_status_id: int_proj_imp_status_id,
        created_by: username,
        tnnt_id: tnnt_id,
      };

      this.setState({ is_loading: true });
      DdHelper.insertRecord(data)
        .then((data) => {
          if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + data.id + " created successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  async updateRecord() {
    const {
      id,
      is_active,
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_us_name,
      text_descr,
      int_feat_id,
      text_us_as_a,
      text_us_i_want,
      text_us_so_that,
      text_us_bus_rational,
      text_us_type,
      int_templ_id,
      int_proj_imp_status_id,


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
           if (!validate.validateMandText(text_us_name)) {
        alertText += ".User Story Name\n"
      }
      if (!validate.validateMandTextOnly(text_us_name)) {
        alertText += ".Invalid User Story Name\n"
      }
      if (!validate.validateMandNumber(int_feat_id)) {
        alertText += ".Feature Name\n"
      } 
      if (!validate.validateMandNumber(int_proj_imp_status_id)) {
        alertText += ".Implementation Status\n"
      } 
         



      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        id: id,
        // task_3 : add more properties to data

        us_name: text_us_name,
        descr: text_descr,
        feat_id: int_feat_id,
        us_as_a: text_us_as_a,
        us_i_want: text_us_i_want,
        us_so_that: text_us_so_that,
        us_bus_rational: text_us_bus_rational,
        us_type: text_us_type,
        templ_id: int_templ_id,
        proj_imp_status_id: int_proj_imp_status_id,
        is_active: is_active == false ? "inactive" : "active",
        created_by: username,
        tnnt_id: tnnt_id,
      };

      this.setState({ is_loading: true });
      DdHelper.updateRecord(data)
        .then((data) => {
          if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + id + " updated successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: true });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  render() {
    const { setVisibility } = this.props;
    const {
      editable,
      is_loading,
      is_active,
      // task_2 : all declared variable add here

      text_us_name,
      text_descr,
      int_feat_id,
      text_us_as_a,
      text_us_i_want,
      text_us_so_that,
      text_us_bus_rational,
      text_us_type,
      int_templ_id,
      int_proj_imp_status_id,
      array_Feat,
      arr_status,
      imp_status_name,
      feat_name,


    } = this.state;

    return (
      <div className={styles.mainWrapper}>
        {is_loading && (
          <div className={"loadingWrapper"}>
            <div className={"innerLoadingWrapper"}>
              <div class="bouncing-loader">
                <div></div>
                <div></div>
                <div></div>
              </div>
            </div>
          </div>
        )}

        <div className={styles.wrapper} onClick={(e) => e.stopPropagation()}>
          <img
            src="/assets/close-red.png"
            className={styles.closeButton}
            onClick={() => setVisibility(false)}
          />
          <div>
            <p className={styles.title}>
              {editable == undefined ? "Create Record" : editable ? "Update Record" : "View Record"}
            </p>
            {/*// task_4 : build logic per column and specific to data type.*/}
            <div className={styles.divMain2}>
    <fieldset className={styles.fieldsetWrapper}>
        <legend className={styles.legendsWrapper1}>Basic Details</legend>
        <div className={styles.sideWrapper}>

            {/* User Story Name */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>
                        User Story Name:<span style={{ color: "red", marginLeft: "3px", fontSize: "20px" }}>*</span>
                    </label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <>
                                <CustomInput
                                    inputType="text"
                                    value={text_us_name}
                                    onChange={(e) => this.setState({ text_us_name: e.target.value })}
                                    style={{
                                        borderColor: 'blue',
                                        backgroundColor: 'white',
                                        width: '100%',
                                    }}
                                />
                                <div className={styles.charCount}>
                                    <span>({text_us_name.length}/60)</span>
                                </div>
                                {text_us_name.length > 60 && (
                                    <p className={styles.validationError}>
                                        User Story Name cannot be more than 60 characters.
                                    </p>
                                )}
                            </>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{text_us_name}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Description */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>Description:</label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <>
                                <CustomInput
                                    inputType="textarea"
                                    value={text_descr}
                                    onChange={(e) => this.setState({ text_descr: e.target.value })}
                                    style={{
                                        borderColor: 'blue',
                                        backgroundColor: 'white',
                                        width: '100%',
                                    }}
                                />
                                <div className={styles.charCount}>
                                    <span>({text_descr.length}/1000)</span>
                                </div>
                            </>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{text_descr}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Feature Name */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>
                        Feature Name:<span style={{ color: "red", marginLeft: "3px", fontSize: "20px" }}>*</span>
                    </label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <select
                                value={int_feat_id === undefined ? 0 : int_feat_id}
                                onChange={(e) => this.setState({ int_feat_id: e.target.value })}
                                style={{
                                    borderColor: 'blue',
                                    backgroundColor: 'white',
                                    width: '100%',
                                }}
                            >
                                <option value={0} disabled selected>Select Feature Name</option>
                                {array_Feat.map((s) => (
                                    <option key={s.id} value={s.id}>{s.name}</option>
                                ))}
                            </select>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{feat_name}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* AS A */}
            {/* AS A */}
<div className={styles.leftWrapper}>
    <div className={styles.inputAlignment}>
        <label>
            AS A:<span style={{ color: "red", marginLeft: "3px", fontSize: "20px" }}>*</span>
        </label>
        <div className={styles.inputCustom}>
            {editable !== false ? (
                <>
                    <CustomInput
                        inputType="text"
                        value={text_us_as_a}
                        onChange={(e) => this.setState({ text_us_as_a: e.target.value })}
                        style={{
                            borderColor: 'blue',
                            backgroundColor: 'white',
                            width: '100%',
                        }}
                    />
                    <div className={styles.charCount}>
                        <span>({text_us_as_a.length}/60)</span>
                    </div>
                </>
            ) : (
                <div className={styles.viewField}>
                    <p>{text_us_as_a}</p>
                </div>
            )}
        </div>
    </div>
</div>

{/* As A */}
<div className={styles.leftWrapper}>
    <div className={styles.inputAlignment}>
        <label>
            As A:<span style={{ color: "red", marginLeft: "3px", fontSize: "20px" }}>*</span>
        </label>
        <div className={styles.inputCustom}>
            {editable !== false ? (
                <CustomInput
                    input type="text"
                    value={text_us_as_a} // Use the appropriate state for the textbox
                    onChange={(e) => this.setState({ text_us_as_a: e.target.value })} // Update state accordingly
                    style={{
                        borderColor: 'blue',
                        backgroundColor: 'white',
                        width: '100%',
                    }}
                />
            ) : (
                <div className={styles.viewField}>
                    <p>{text_us_as_a}</p>
                </div>
            )}
             
        </div>
        <div className={styles.charCount}>
                        <span>({text_us_i_want.length}/60)</span>
                    </div>
    </div>
</div>

{/* I WANT */}
<div className={styles.leftWrapper}>
    <div className={styles.inputAlignment}>
        <label>I WANT:</label>
        <div className={styles.inputCustom}>
            {editable !== false ? (
                <>
                    <CustomInput
                        inputType="text"
                        value={text_us_i_want}
                        onChange={(e) => this.setState({ text_us_i_want: e.target.value })}
                        style={{
                            borderColor: 'blue',
                            backgroundColor: 'white',
                            width: '100%',
                        }}
                    />
                    <div className={styles.charCount}>
                        <span>({text_us_i_want.length}/60)</span>
                    </div>
                </>
            ) : (
                <div className={styles.viewField}>
                    <p>{text_us_i_want}</p>
                </div>
            )}
        </div>
    </div>
</div>


            {/* SO THAT */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>SO THAT:</label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <>
                                <CustomInput
                                    inputType="text"
                                    value={text_us_so_that}
                                    onChange={(e) => this.setState({ text_us_so_that: e.target.value })}
                                    style={{
                                        borderColor: 'blue',
                                        backgroundColor: 'white',
                                        width: '100%',
                                    }}
                                />
                                <div className={styles.charCount}>
                                    <span>({text_us_so_that.length}/60)</span>
                                </div>
                            </>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{text_us_so_that}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Business Rational */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>Business Rational:</label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <>
                                <CustomInput
                                    inputType="textarea"
                                    value={text_us_bus_rational}
                                    onChange={(e) => this.setState({ text_us_bus_rational: e.target.value })}
                                    style={{
                                        borderColor: 'blue',
                                        backgroundColor: 'white',
                                        width: '100%',
                                    }}
                                />
                                <div className={styles.charCount}>
                                    <span>({text_us_bus_rational.length}/1000)</span>
                                </div>
                            </>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{text_us_bus_rational}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* User Story Type */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>User Story Type:</label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <>
                                <CustomInput
                                    inputType="text"
                                    value={text_us_type}
                                    onChange={(e) => this.setState({ text_us_type: e.target.value })}
                                    style={{
                                        borderColor: 'blue',
                                        backgroundColor: 'white',
                                        width: '100%',
                                    }}
                                />
                                <div className={styles.charCount}>
                                    <span>({text_us_type.length}/60)</span>
                                </div>
                            </>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{text_us_type}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Template ID */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>Template ID:</label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <>
                                <CustomInput
                                    inputType="number"
                                    value={int_templ_id}
                                    onChange={(e) => this.setState({ int_templ_id: e.target.value })}
                                    style={{
                                        borderColor: 'blue',
                                        backgroundColor: 'white',
                                        width: '100%',
                                    }}
                                />
                            </>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{int_templ_id}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Implementation Status */}
            <div className={styles.leftWrapper}>
                <div className={styles.inputAlignment}>
                    <label>
                        Implementation Status:<span style={{ color: "red", marginLeft: "3px", fontSize: "20px" }}>*</span>
                    </label>
                    <div className={styles.inputCustom}>
                        {editable !== false ? (
                            <select
                                value={int_proj_imp_status_id === undefined ? 0 : int_proj_imp_status_id}
                                onChange={(e) => this.setState({ int_proj_imp_status_id: e.target.value })}
                                style={{
                                    borderColor: 'blue',
                                    backgroundColor: 'white',
                                    width: '100%',
                                }}
                            >
                                <option value={0} disabled selected>Select Implementation Status</option>
                                {arr_status.map((s) => (
                                    <option key={s.id} value={s.id}>{s.name}</option>
                                ))}
                            </select>
                        ) : (
                            <div className={styles.viewField}>
                                <p>{imp_status_name}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
</div>

            <div className={styles.inputAlignment}>
              <p className={`mandatory`}><span style={{ color: "red", marginLeft: "3px", fontSize: "15px" }}>* are mandatory fields</span></p>
            </div>
            <div
              className={styles.inputAlignment}
              style={{
                justifyContent: "space-around",
                display: "flex",
              }}
            >
              {editable !== undefined && (
                <div>
                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={is_active}
                      onChange={(e) =>
                        this.setState({
                          is_active: e.target.checked,
                        })
                      }
                      disabled={editable == false}
                    />
                    <span className="slider round"></span>
                  </label>
                  <p className={styles.statusText}>
                    {is_active ? "Active" : "Inactive"}
                  </p>
                </div>
              )}
            </div>
            {editable != false && (
              <div className={styles.button}>
                <button
                  className={`button`}
                  onClick={() =>
                    editable == undefined
                      ? this.insertRecord()
                      : editable && this.updateRecord()
                  }
                >
                  {editable == undefined ? "Create" : editable && "Update"}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
}