// this source generated by GenAI pythonProject
import React from "react";
import moment from "moment";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Swal from "sweetalert2";
import Colors from "../../constants/colors";

import CustomInput from "../customInput/customInput";
import SampleHelper from "../../helper/sdlcMgmt/sdCltDet";
import PfWfdHelper from "../../helper/pfmMgmt/pfWFDet";
import PfUserActivityDet from "../../helper/pfmMgmt/pfUserActivityDet";
import validate from "../../validation/dataValidate";




export default class SdCltDet extends React.Component {
  constructor(props) {
    super(props);
    const stateData = {
      tnnt_id: global.config.tnnt_id,
      username: "",
      role_id: global.config.user_role,
      is_loading: false,
      selectedData: undefined,
      editable: undefined,
      com_id:2,
      is_active: true,
      id: "",
      // task_1 : variable_declare

      text_clt_name: "",
      text_descr: "",
      editableOrder: false,
      id_selectedVerify: undefined,
      arr_verify: [],
      num_old_wfs: 1,
      access_role_user: global.config.access_role_list,
      bl_role_user: "",


    };
    if (props.data !== undefined) {
      stateData.editable = props.editable;
      stateData.id = props.data;
      stateData.editableOrder = props.editableOrder;
    }

    this.state = {
      ...stateData,
    };
  }
  componentDidMount() {
    const { editable, editableOrder, num_old_wfs } = this.state;
    const username = global.config.username;
    const ms_id = "1";
    if (username != null && username !== undefined) {
      this.setState({
        username: username,
        tnnt_id: global.config.tnnt_id,
      });
    }

    editable !== undefined && this.getRecord();
    editable == undefined && this.getWfa(num_old_wfs);
    (editableOrder || editable) && this.getOrderTranst();
    const user_name = global.config.username;
    const created_by = username;
    const tnnt_id = global.config.tnnt_id;
    PfUserActivityDet.insertRecord({ user_name, ms_id, created_by, tnnt_id })
      .then((response) => {
        // Handle success response
        console.log("Data inserted successfully:", response);
      })
      .catch((error) => {
        console.error("Error inserting data:", error);
      });
  }

  getRecord() {
    const { id, tnnt_id, editableOrder  } = this.state;

    const filter = {
      id: id,
      tnnt_id: tnnt_id,
    };

    if (editableOrder == true) {
      SampleHelper.getRecordForOrder(filter)
        .then((data) => {
          this.setState({
            // update the state of the component

            text_clt_name: data[0].clt_name,
            text_descr: data[0].descr,
            is_active: data[0].is_active == "active" ? true : false,
            num_old_wfs: data[0].next_wfs_id,
          });
        })
        .catch((err) => {
          console.log(err);
        });
    } else {

    SampleHelper.getRecord(filter)
      .then((data) => {
        console.log(data)
        this.setState({
          // update the state of the component
        text_clt_name: data[0].clt_name,
        text_descr: data[0].descr,
          is_active: data[0].is_active == "active" ? true : false,
          num_old_wfs: data[0].next_wfs_id,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }
}

getOrderTranst() {
  const { id, tnnt_id, com_id, num_old_wfs } = this.state;

  const filter = {
    rec_id: id,
    tnnt_id: tnnt_id,
    com_id: com_id,
    is_active: "active",
  };

  PfWfdHelper.getOrderTranst(filter)
    .then((data) => {

      if (data[0].next_wfs_id == 2) {
        this.setState({
          id_selectedVerify: 4,
        });
        this.getWfa(num_old_wfs);
      } else if (data[0].next_wfs_id == 3) {
        this.setState({
          id_selectedVerify: 3,
        });
        this.getWfa(num_old_wfs);
      } else {
        this.getWfa(data[0].next_wfs_id);
      }
    })
    .catch((err) => {
      console.log(err);
    });
}

getWfa(num_old_wfs) {
  const { com_id, tnnt_id, access_role_user, stateData } = this.state;

  const filter = {
    com_id: com_id,
    tnnt_id: tnnt_id,
    old_wfs_id: num_old_wfs,
    is_active: "active",
  };

  PfWfdHelper.getWfa(filter)
    .then((data) => {
      const access_role_list = data[0].access_role_users_list;
      // const role_id = parseInt(access_role_user);
      const role_id = access_role_user.split(";").map((id) => parseInt(id));
      const roleIds = access_role_list.split(";").map((id) => parseInt(id));
      // const isRoleAllowed = roleIds.includes(role_id);
      const isRoleAllowed = role_id.some(id => roleIds.includes(id));

      this.setState({
        arr_verify: data,
        bl_role_user: isRoleAllowed,
        id_selectedVerify: num_old_wfs == 1 ? data[0].next_wfs_id : undefined,
      });
    })
    .catch((err) => {
      console.log(err);
    });
}

  async insertRecord() {
    const {
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_clt_name,
      text_descr,
      id_selectedVerify,
      editableOrder,
      bl_role_user,
      arr_verify,


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (!validate.validateMandText(text_clt_name)) {
        alertText += ".Client Name\n"
      }
      if (!validate.validateMandTextOnly(text_clt_name)) {
        alertText += ".Invalid Client Name\n"
      }
    if (editableOrder) {
        if (!validate.validateMandNumber(id_selectedVerify)) {
          alertText += ".Verification\n"
        }



      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
            allowOutsideClick: false,
          });
          return;
        }
      }
      if (!bl_role_user) {
        Swal.fire({
          text: "You cannot perform this action",
          confirmButtonColor: Colors.red,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        // task_3 : add more properties to data

        clt_name: text_clt_name,
        descr: text_descr,


        lc_status_id: 1,
        created_by: username,
        tnnt_id: tnnt_id,
        next_wfs_id: id_selectedVerify,
      };

      data.arr_wfs = arr_verify;
      data.arr_wfs[0].user_name = username;

      this.setState({ is_loading: true });
      SampleHelper.insertRecord(data)
        .then((data) => {
          console.log(data)
          if ((data.code == 200) & (id_selectedVerify === 2)) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + data.id + " created successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          } else if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text:
                "Your record ID " +
                data.id +
                " is being reviewed & once approved you will be able to view the record!!",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          }else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  async updateRecord() {
    const {
      id,
      is_active,
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      text_clt_name,
      text_descr,
      arr_verify,
      id_selectedVerify,
      bl_role_user,
      editableOrder,
      com_id


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (!validate.validateMandText(text_clt_name)) {
        alertText += ".Client Name\n"
      }
      if (!validate.validateMandTextOnly(text_clt_name)) {
        alertText += ".Invalid Client Name\n"
      }

      if (editableOrder) {
        if (!validate.validateMandNumber(id_selectedVerify)) {
          alertText += ".Verification\n"
        }

        if (!bl_role_user) {
          Swal.fire({
            icon: "warning",
            text: "You don't have permission to Verify!!",
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          return;
        }
      }


      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const filter = {
        rec_id: id,
        user_name: username,
        next_wfs_id: 4,
        tnnt_id: tnnt_id,
        is_active: "active",
        com_id: com_id,
      };

      const checkUser = await PfWfdHelper.checkOrderTranst(filter);

      const data = {
        id: id,
        // task_3 : add more properties to data

        clt_name: text_clt_name,
        descr: text_descr,



        lc_status_id: 1,
        is_active: is_active == false ? "inactive" : "active",
        created_by: username,
        tnnt_id: tnnt_id,
        next_wfs_id: id_selectedVerify == undefined ? null : id_selectedVerify,
      };

      data.arr_wfs = arr_verify.filter(
        (item) => item.next_wfs_id == id_selectedVerify
      );
      data.arr_wfs[0].user_name = username;
      data.arr_wfs[0].rec_id = id;

      const alert_message =
        id_selectedVerify == 6
          ? "Order is now ready for six eye verification"
          : id_selectedVerify == 5
            ? "Order has been reject."
            : id_selectedVerify == 7
              ? "Order has been reject."
              : id_selectedVerify == 3
                ? "Order is successfully discarded!!"
                : id_selectedVerify == 2
                  ? "Order is verified and can accessed in Ventor Details Page"
                  : "Your Ventor record is being reviewed & once approved you will be able to see the changes!!";


      this.setState({ is_loading: true });
      SampleHelper.updateRecord(data)
        .then((data) => {
          if (data.code.code == 200) {
            this.props.getData();
            Swal.fire({
              // text: "Record Id: " + id + " updated successfully.",
              text: alert_message,
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: true });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  render() {
    const { setVisibility } = this.props;
    const {
      editable,
      is_loading,
      is_active,
      // task_2 : all declared variable add here

      text_clt_name,
      text_descr,
      arr_verify,
      id_selectedVerify,
      editableOrder


    } = this.state;

    return (
      <div className={styles.mainWrapper}>
        {is_loading && (
          <div className={"loadingWrapper"}>
            <div className={"innerLoadingWrapper"}>
              <div class="bouncing-loader">
                <div></div>
                <div></div>
                <div></div>
              </div>
            </div>
          </div>
        )}

        <div className={styles.wrapper} onClick={(e) => e.stopPropagation()}>
          <img
            src="/assets/close-red.png"
            className={styles.closeButton}
            onClick={() => setVisibility(false)}
          />
          <div>
            <p className={styles.title}>
              {editable == undefined ? "Create Record" : editable ? "Update Record" : "View Record"}
            </p>
            {/*// task_4 : build logic per column and specific to data type.*/}
            <div className={styles.divMain2}>
    <fieldset className={styles.fieldsetWrapper}>
        <legend className={styles.legendsWrapper1}>Basic Details</legend>
        <div className={styles.sideWrapper}>

        <div className={styles.leftWrapper}>
    {/* Client Name Field */}
    <div className={styles.inputAlignment} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
        <p style={{ marginRight: '10px' }}>
            Client Name:<span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
        </p>
        {editable !== false ? (
            <div style={{ flex: '1' }}>
                <CustomInput
                    inputType="text"
                    value={text_clt_name}
                    onChange={(e) =>
                        this.setState({
                            text_clt_name: e.target.value,
                        })
                    }
                    style={{
                        borderColor: 'blue',
                        backgroundColor: 'white',
                        width: '100%',
                        display: 'inline-block',
                    }}
                />
                <div style={{ textAlign: 'right', marginTop: '5px' }}>
                    <span>({text_clt_name.length}/60)</span>
                </div>
                {text_clt_name.length > 60 && (
                    <p className={styles.validationError}>
                        Client Name cannot be more than 60 characters.
                    </p>
                )}
            </div>
        ) : (
            <div className={styles.viewField}>
                <p>{text_clt_name}</p>
            </div>
        )}
    </div>

 {/* Description Field */}
<div className={styles.inputAlignment} style={{ display: 'flex', alignItems: 'center' }}>
    <p style={{ marginRight: '10px' }}>
        Description:<span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
    </p>
    {editable !== false ? (
        <div style={{ flex: '1' }}>
            <CustomInput
                inputType="textarea"
                value={text_descr}
                onChange={(e) =>
                    this.setState({
                        text_descr: e.target.value,
                    })
                }
                style={{
                    border: '1px solid blue', // Single border around the textarea
                    backgroundColor: '#f0f0f0', // Light gray background
                    width: '110%', // Set width (ensure it matches the height)
                    height: '90px', // Set height to match width
                     // Padding inside textarea
                    boxSizing: 'border-box', // Includes padding and border in width/height
                    resize: 'none', // Prevent resizing
                    borderRadius: '4px', // Optional: rounded corners
                    outline: 'none', // No outline when focused
                }}
            />
            <div style={{ textAlign: 'right', marginTop: '5px' }}>
                <span>({text_descr.length}/1000)</span>
            </div>
            {text_descr.length > 1000 && (
                <p className={styles.validationError}>
                    Description cannot be more than 1000 characters.
                </p>
            )}
        </div>
    ) : (
        <div className={styles.viewField}>
            <p>{text_descr}</p>
        </div>
    )}
</div>

</div>


        </div>
    </fieldset>
</div>
      






                                              
     
            <div className={styles.inputAlignment}>
              <p className={`mandatory`}><span style={{ color: "red", marginLeft: "3px", fontSize: "15px" }}>* are mandatory fields</span></p>
            </div>
            <div
              className={styles.inputAlignment}
              style={{
                justifyContent: "space-around",
                display: "flex",
              }}
            >
              {editable !== undefined && (
                <div>
                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={is_active}
                      onChange={(e) =>
                        this.setState({
                          is_active: e.target.checked,
                        })
                      }
                      disabled={editable == false}
                    />
                    <span className="slider round"></span>
                  </label>
                  <p className={styles.statusText}>
                    {is_active ? "Active" : "Inactive"}
                  </p>
                </div>
              )}
            </div>
            <div className={styles.button}>
              {(editableOrder == true || editable != false) && (
                <div className={styles.verifyAlignment}>
                  <div className={styles.inputAlignmentVerify}>
                    <select
                      value={id_selectedVerify}
                      onChange={(e) =>
                        this.setState({
                          id_selectedVerify: e.target.value,
                        })
                      }
                    >
                      <option value={0} disabled selected>
                        {"Select..."}
                      </option>
                      {arr_verify.map((b) => (
                        <option value={b.next_wfs_id}>{b.wfa_name}</option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
              {editableOrder ? (
                <div className={styles.button}>
                  <button
                    className={`button`}
                    onClick={() => this.updateRecord()}
                  >
                    {"Submit"}
                  </button>
                </div>
              ) : (
            editable != false && (
              <div className={styles.button}>
                <button
                  className={`button`}
                  onClick={() =>
                    editable == undefined
                      ? this.insertRecord()
                      : editable && this.updateRecord()
                  }
                >
                  {editable == undefined ? "Create" : editable && "Update"}
                </button>
              </div>
            )
            )}
          </div>
          </div>
        </div>
      </div>
    );
  }
}