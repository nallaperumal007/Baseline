// this source generated by GenAI v2.9.4 
import API from "../../utils/api";

const PfDocModuleDet = {

    insertRecord: (data) =>
        new Promise(function (resolve, reject) {
            API.post("/pfDocModuleDet/insertRecord", data, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    if (res.status === 200) {
                        resolve(res.data);
                    } else {
                        reject(res.data.msg);
                    }
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    updateRecord: (data) =>
        new Promise(function (resolve, reject) {
            API.patch("/pfDocModuleDet/updateRecord", data, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    resolve(res.data);
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    getRecord: (filter) =>
        new Promise(function (resolve, reject) {
            const baseUrl = "/pfDocModuleDet/getRecord";
            const filterUrl = PfDocModuleDet.getFilterUrl(filter);
            console.log(`${baseUrl}?${filterUrl}`)
            API.get(`${baseUrl}?${filterUrl}`, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    resolve(PfDocModuleDet.formatRecord(res.data));
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    formatRecord: (data) => {
        const formatted = [];

        for (let d of data) {
            formatted.push({


                id: d.id,
                module_name: d.module_name,
                module_access_id: d.module_access_id,
                private_access_id: d.private_access_id,
                public_access_id: d.public_access_id,
                lc_status_id: d.lc_status_id,
                is_active: d.is_active,
                created_at: d.created_at,
                created_by: d.created_by,
                tnnt_id: d.tnnt_id,

            });
        }
        return formatted;
    },

    getPageDet: (filter) =>
        new Promise(function (resolve, reject) {
            const baseUrl = "/pfDocModuleDet/getPageDet";
            const filterUrl = PfDocModuleDet.getFilterUrl(filter);
            API.get(`${baseUrl}?${filterUrl}`, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    resolve(PfDocModuleDet.formatPageDet(res.data));
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    formatPageDet: (data) => {
        const formatted = [];

        for (let d of data) {
            formatted.push({
                comment_cnt: d.comment_cnt == null ? 0 : d.comment_cnt,


                id: d.id,
                module_name: d.module_name,
                module_access_id: d.module_access_id,
                private_access_id: d.private_access_id,
                public_access_id: d.public_access_id,
                lc_status_id: d.lc_status_id,
                is_active: d.is_active,
                created_at: d.created_at,
                created_by: d.created_by,
                tnnt_id: d.tnnt_id,

            });
        }
        return formatted;
    },
    getAuditData: (filter) =>
        new Promise(function (resolve, reject) {
            const baseUrl = "/pfDocModuleDet/getAudit";
            const filterUrl = PfDocModuleDet.getFilterUrl(filter);
            API.get(`${baseUrl}?${filterUrl}`, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    console.log("res.data: ", res.data);
                    resolve(res.data);
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    getFilteredData: (filter) =>
        new Promise(function (resolve, reject) {
            const baseUrl = "/pfDocModuleDet/getFilteredData";
            const filterUrl = PfDocModuleDet.getFilterUrl(filter);
            API.get(`${baseUrl}?${filterUrl}`, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    resolve(PfDocModuleDet.formatFiltered(res.data));
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    formatFiltered: (data) => {
        const formatted = [];

        for (let d of data) {
            formatted.push({


                id: d.id,
                module_name: d.module_name,
                module_access_id: d.module_access_id,
                private_access_id: d.private_access_id,
                public_access_id: d.public_access_id,
                lc_status_id: d.lc_status_id,
                is_active: d.is_active,
                created_at: d.created_at,
                created_by: d.created_by,
                tnnt_id: d.tnnt_id,

            });
        }
        return formatted;
    },

    getModuleList: (filter) =>
        new Promise(function (resolve, reject) {
            const baseUrl = "/pfDocModuleDet/getModuleList";
            const filterUrl = PfDocModuleDet.getFilterUrl(filter);
            API.get(`${baseUrl}?${filterUrl}`, {
                headers: {
                    "x-access-token": global.config.accessToken,
                },
            })
                .then(async (res) => {
                    // resolve(PfDocModuleDet.formatFilteredList(res.data));
                    resolve(res.data);
                })
                .catch((err) => {
                    reject(err);
                });
        }),

    formatFilteredList: (data) => {
        const formatted = [];
        const moduleMap = new Map();

        for (const d of data) {
            // Skip if the usecase_id is null
            if (d.usecase_id === null) {
                continue;
            }

            // Check if the module is already in the map
            let module = moduleMap.get(d.module_id);
            if (!module) {
                module = {
                    key: d.module_id,
                    label: d.module_name,
                    children: []
                };
                moduleMap.set(d.module_id, module);
            }

            // Add the usecase as a child to the module
            module.children.push({
                key: d.usecase_id,
                label: d.usecase_name
            });
        }

        // Convert the map to an array
        for (const module of moduleMap.values()) {
            formatted.push(module);
        }

        return formatted;
    },

    getFilterUrl: (filter) => {
        let url = "";

        if (filter !== undefined) {
            if (filter.com_id !== undefined) {
                url += "com_id=" + filter.com_id + "&";
            }

            if (filter.id !== undefined) {
                url += "id=" + filter.id + "&";
            }
            if (filter.module_name !== undefined) {
                url += "module_name=" + filter.module_name + "&";
            }
            if (filter.module_access_id !== undefined) {
                url += "module_access_id=" + filter.module_access_id + "&";
            }
            if (filter.private_access_id !== undefined) {
                url += "private_access_id=" + filter.private_access_id + "&";
            }
            if (filter.public_access_id !== undefined) {
                url += "public_access_id=" + filter.public_access_id + "&";
            }
            if (filter.lc_status_id !== undefined) {
                url += "lc_status_id=" + filter.lc_status_id + "&";
            }
            if (filter.is_active !== undefined) {
                url += "is_active=" + filter.is_active + "&";
            }
            if (filter.created_at !== undefined) {
                url += "created_at=" + filter.created_at + "&";
            }
            if (filter.created_by !== undefined) {
                url += "created_by=" + filter.created_by + "&";
            }
            if (filter.tnnt_id !== undefined) {
                url += "tnnt_id=" + filter.tnnt_id + "&";
            }
            if (filter.ref_id !== undefined) {
                url += "ref_id=" + filter.ref_id + "&";
            }
            //param_value

        }
        return url;
    },
};

export default PfDocModuleDet;