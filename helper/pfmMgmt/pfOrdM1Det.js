// this source generated by GenAI v2.9.4
import API from "../../utils/api";
import moment from "moment";

const PfOrdM1Det = {
  insertBatch: (data) =>
    new Promise(function (resolve, reject) {
      API.post("/pfOrdM1Det/insertBatch", data, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          if (res.status === 200) {
            resolve(res.data);
          } else {
            reject(res.data.msg);
          }
        })
        .catch((err) => {
          reject(err);
        });
    }),

  insertRecord: (data) =>
    new Promise(function (resolve, reject) {
      API.post("/pfOrdM1Det/insertRecord", data, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          if (res.status === 200) {
            resolve(res.data);
          } else {
            reject(res.data.msg);
          }
        })
        .catch((err) => {
          reject(err);
        });
    }),

  updateRecord: (data) =>
    new Promise(function (resolve, reject) {
      API.patch("/pfOrdM1Det/updateRecord", data, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          resolve(res.data);
        })
        .catch((err) => {
          reject(err);
        });
    }),

  updateBatch: (data) =>
    new Promise(function (resolve, reject) {
      API.patch("/pfOrdM1Det/updateBatch", data, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          resolve(res.data);
        })
        .catch((err) => {
          reject(err);
        });
    }),

  getRecord: (filter) =>
    new Promise(function (resolve, reject) {
      const baseUrl = "/pfOrdM1Det/getRecord";
      const filterUrl = PfOrdM1Det.getFilterUrl(filter);
      API.get(`${baseUrl}?${filterUrl}`, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          resolve(PfOrdM1Det.formatRecord(res.data));
        })
        .catch((err) => {
          reject(err);
        });
    }),

    getRecordForOrder: (filter) =>
      new Promise(function (resolve, reject) {
        const baseUrl = "/pfOrdM1Det/getRecordForOrder";
        const filterUrl = PfOrdM1Det.getFilterUrl(filter);
        API.get(`${baseUrl}?${filterUrl}`, {
          headers: {
            "x-access-token": global.config.accessToken,
          },
        })
          .then(async (res) => {
            resolve(PfOrdM1Det.formatRecord(res.data));
          })
          .catch((err) => {
            reject(err);
          });
      }),

  formatRecord: (data) => {
    const formatted = [];

    for (let d of data) {
      formatted.push({
        id: d.id,
        ord_type_id: d.ord_type_id,
        clt_ref_id: d.clt_ref_id,
        clt_id: d.clt_id,
        machine_id: d.machine_id,
        issue_reported: d.issue_reported,
        assigned_to_id: d.assigned_to_id,
        attend_to: d.attend_to == null ? "" : d.attend_to,
        attend_time: d.attend_time == null ? "" : d.attend_time.replace(/\.$/, ""),
        observation_details: d.observation_details,
        ord_status_id: d.ord_status_id,
        lc_status_id: d.lc_status_id,
        is_active: d.is_active,
        created_at: d.created_at,
        created_by: d.created_by,
        tnnt_id: d.tnnt_id,
      });
    }
    return formatted;
  },

  getPageDet: (filter) =>
    new Promise(function (resolve, reject) {
      const baseUrl = "/pfOrdM1Det/getPageDet";
      const filterUrl = PfOrdM1Det.getFilterUrl(filter);
      API.get(`${baseUrl}?${filterUrl}`, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          resolve(PfOrdM1Det.formatPageDet(res.data));
        })
        .catch((err) => {
          reject(err);
        });
    }),

  formatPageDet: (data) => {
    const formatted = [];

    for (let d of data) {
      formatted.push({
        comment_cnt: d.comment_cnt == null ? 0 : d.comment_cnt,

        id: d.id,
        ord_type_id: d.ord_type_id,
        clt_id: d.clt_id,
        clt_ref_id: d.clt_ref_id,
        machine_id: d.machine_id,
        machine_nr: d.machine_nr,
        issue_reported: d.issue_reported,
        assigned_to_id: d.assigned_to_id,
        clt_name: d.clt_name,
        assigned_to_name: d.assigned_to_name,
        ord_type_name: d.ord_type_name,
        attend_to: d.attend_to == null ? "" : d.attend_to,
        attend_time: d.attend_time == null ? "" : d.attend_time.replace(/\.$/, ""),
        observation_details: d.observation_details,
        ord_status_id: d.ord_status_id,
        lc_status_id: d.lc_status_id,
        is_active: d.is_active,
        created_at: d.created_at,
        created_by: d.created_by,
        tnnt_id: d.tnnt_id,
      });
    }
    return formatted;
  },
  getAuditData: (filter) =>
    new Promise(function (resolve, reject) {
      const baseUrl = "/pfOrdM1Det/getAudit";
      const filterUrl = PfOrdM1Det.getFilterUrl(filter);
      API.get(`${baseUrl}?${filterUrl}`, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          console.log("res.data: ", res.data);
          resolve(res.data);
        })
        .catch((err) => {
          reject(err);
        });
    }),

  getFilteredData: (filter) =>
    new Promise(function (resolve, reject) {
      const baseUrl = "/pfOrdM1Det/getFilteredData";
      const filterUrl = PfOrdM1Det.getFilterUrl(filter);
      API.get(`${baseUrl}?${filterUrl}`, {
        headers: {
          "x-access-token": global.config.accessToken,
        },
      })
        .then(async (res) => {
          resolve(PfOrdM1Det.formatFiltered(res.data));
        })
        .catch((err) => {
          reject(err);
        });
    }),

  formatFiltered: (data) => {
    const formatted = [];

    for (let d of data) {
      formatted.push({
        id: d.id,
        ord_type_id: d.ord_type_id,
        clt_ref_id: d.clt_ref_id,
        clt_id: d.clt_id,
        machine_id: d.machine_id,
        issue_reported: d.issue_reported,
        assigned_to_id: d.assigned_to_id,
        clt_name: d.clt_name,
        assigned_to_name: d.assigned_to_name,
        ord_type_name: d.ord_type_name,
        attend_to: d.attend_to == null ? "" : d.attend_to,
        attend_time: d.attend_time == null ? "" : d.attend_time.replace(/\.$/, ""),
        observation_details: d.observation_details,
        ord_status_id: d.ord_status_id,
        lc_status_id: d.lc_status_id,
        is_active: d.is_active,
        created_at: d.created_at,
        created_by: d.created_by,
        tnnt_id: d.tnnt_id,
      });
    }
    return formatted;
  },

  getFilterUrl: (filter) => {
    let url = "";

    if (filter !== undefined) {
      if (filter.com_id !== undefined) {
        url += "com_id=" + filter.com_id + "&";
      }

      if (filter.id !== undefined) {
        url += "id=" + filter.id + "&";
      }
      if (filter.ord_status_id !== undefined) {
        url += "ord_status_id=" + filter.ord_status_id + "&";
      }
      if (filter.ord_type_id !== undefined) {
        url += "ord_type_id=" + filter.ord_type_id + "&";
      }
      if (filter.clt_id !== undefined) {
        url += "clt_id=" + filter.clt_id + "&";
      }
      if (filter.machine_id !== undefined) {
        url += "machine_id=" + filter.machine_id + "&";
      }
      if (filter.issue_reported !== undefined) {
        url += "issue_reported=" + filter.issue_reported + "&";
      }
      if (filter.assigned_to_id !== undefined) {
        url += "assigned_to_id=" + filter.assigned_to_id + "&";
      }
      if (filter.attend_to !== undefined) {
        url += "attend_to=" + filter.attend_to + "&";
      }
      if (filter.attend_time !== undefined) {
        url += "attend_time=" + filter.attend_time + "&";
      }
      if (filter.observation_details !== undefined) {
        url += "observation_details=" + filter.observation_details + "&";
      }
      if (filter.ord_status_id !== undefined) {
        url += "ord_status_id=" + filter.ord_status_id + "&";
      }
      if (filter.lc_status_id !== undefined) {
        url += "lc_status_id=" + filter.lc_status_id + "&";
      }
      if (filter.is_active !== undefined) {
        url += "is_active=" + filter.is_active + "&";
      }
      if (filter.created_at !== undefined) {
        url += "created_at=" + filter.created_at + "&";
      }
      if (filter.created_by !== undefined) {
        url += "created_by=" + filter.created_by + "&";
      }
      if (filter.tnnt_id !== undefined) {
        url += "tnnt_id=" + filter.tnnt_id + "&";
      }
      if (filter.ref_id !== undefined) {
        url += "ref_id=" + filter.ref_id + "&";
      }
      //param_value
    }
    return url;
  },
};

export default PfOrdM1Det;
