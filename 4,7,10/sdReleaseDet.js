// this source generated by GenAI pythonProject
import React from "react";
import moment from "moment";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Swal from "sweetalert2";
import Colors from "../../constants/colors";
import styles from "../../styles/createcom2.module.css";
import CustomInput from "../customInput/customInput";
import SdlcProjectHelper from "../../helper/sdlcMgmt/sdProjDet";
import SampleHelper from "../../helper/sdlcMgmt/sdReleaseDet";
import DdHelper from "../../helper/sdlcMgmt/sdDdLookup";
import PfUserActivityDet from "../../helper/pfmMgmt/pfUserActivityDet";
import validate from "../../validation/dataValidate";


export default class SdReleaseDet extends React.Component {
  constructor(props) {
    super(props);
    const stateData = {
      tnnt_id: global.config.tnnt_id,
      username: "",
      role_id: global.config.user_role,
      is_loading: false,
      selectedData: undefined,
      editable: undefined,
      com_id:2,
      is_active: true,
      id: "",
      // task_1 : variable_declare

      int_proj_id: undefined,
      text_release_name: "",
      date_start_date: "",
      date_end_date: "",
      text_release_lead: "",
      int_tc_id: undefined,
      array_SdlcProject: [],
      array_tscycle: [],


    };
    if (props.data !== undefined) {
      stateData.editable = props.editable;
      stateData.id = props.data;
    }

    this.state = {
      ...stateData,
    };
  }
  componentDidMount() {
    const { editable } = this.state;
    const username = global.config.username;
    const ms_id = "1";
    if (username != null && username !== undefined) {
      this.setState({
        username: username,
        tnnt_id: global.config.tnnt_id,
      });
    }
    this.getForDropDownProj();
    editable !== undefined && this.getRecord();
    const user_name = global.config.username;
    const created_by = username;
    const tnnt_id = global.config.tnnt_id;
    PfUserActivityDet.insertRecord({ user_name, ms_id, created_by, tnnt_id })
      .then((response) => {
        // Handle success response
        console.log("Data inserted successfully:", response);
      })
      .catch((error) => {
        console.error("Error inserting data:", error);
      });

  }

  getForDropDownProj() {
    const {
        tnnt_id,
    } = this.state;

    const filter = {
        tnnt_id: tnnt_id,
        is_active: 'active',
    };

    SdlcProjectHelper.getForDropDown(filter)
    .then((data) => {
        this.setState({ array_SdlcProject: data });
    })
    DdHelper.getTestCycleName(filter)
    .then((data) => {
        this.setState({ array_tscycle: data });
    })
    .catch((err) => {
        console.log(err);
    })
}

  getRecord() {
    const { id, tnnt_id } = this.state;

    const filter = {
      id: id,
      tnnt_id: tnnt_id,
    };

    SampleHelper.getRecord(filter)
      .then((data) => {
        console.log(data)
        this.setState({
          // update the state of the component
        int_proj_id: data[0].proj_id,
        proj_name: data[0].proj_name,
        text_release_name: data[0].release_name,
        // start_date: new Date(moment(data[0].start_date).format("DD-MMM-YYYY")),
        // end_date: data[0].start_date === null ? null : new Date(moment(data[0].end_date, "DD/MM/YYYY").format("DD/MMM/YYYY")),
        date_start_date: data[0].start_date === null ? null : new Date(moment(data[0].start_date, "DD/MM/YYYY").format("DD/MMM/YYYY")),
        date_end_date: data[0].end_date === null ? null : new Date(moment(data[0].end_date, "DD/MM/YYYY").format("DD/MMM/YYYY")),
        text_release_lead: data[0].release_lead,
        int_tc_id: data[0].tc_id,
        is_active: data[0].is_active == "active" ? true : false,
        proj_name: data[0].proj_name,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  async insertRecord() {
    const {
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      int_proj_id,
      text_release_name,
      date_start_date,
      date_end_date,
      text_release_lead,
      int_tc_id,
      start_date,
      end_date


    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      
      if (!validate.validateMandNumber(int_proj_id)) {
        alertText += ".Project Name\n"
      } 
      if (!validate.validateMandText(text_release_name)) {
        alertText += ".Release Name\n"
      }
      if (!validate.validateMandTextOnly(text_release_name)) {
        alertText += ".Invalid Release Name\n"
      }
      if (!validate.validateDatePair(date_start_date)) {
        alertText += ".Start Date\n"
      } 
      if (!validate.validateDatePair(date_end_date)) {
        alertText += ".End Date\n"
      } 
      if (!validate.validateMandText(text_release_lead)) {
        alertText += ".Release Lead\n"
      }
      if (!validate.validateMandTextOnly(text_release_lead)) {
        alertText += ".Invalid Release Lead\n"
      }
      if (!validate.validateMandNumber(int_tc_id)) {
        alertText += ".Test Cycle Name\n"
      }
           
           
           
           
           
           



      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        // task_3 : add more properties to data

        proj_id: int_proj_id,
        release_name: text_release_name,
        start_date: moment(date_start_date).format("YYYY-MM-DD"),
        end_date: moment(date_end_date).format("YYYY-MM-DD"),
        release_lead: text_release_lead,
        tc_id: int_tc_id,


        // lc_status_id: 1,
        created_by: username,
        tnnt_id: tnnt_id,
      };

      this.setState({ is_loading: true });
      SampleHelper.insertRecord(data)
        .then((data) => {
          if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + data.id + " created successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: false });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  async updateRecord() {
    const {
      id,
      is_active,
      tnnt_id,
      username,
      // task_2 : all declared variable add here

      int_proj_id,
      text_release_name,
      date_start_date,
      date_end_date,
      text_release_lead,
      int_tc_id,
      start_date,
      end_date,

    } = this.state;

    try {
      const alertInitial = "";
      let alertText = alertInitial;

      //Validation
      if (!validate.validateMandNumber(int_proj_id)) {
        alertText += ".Project Name\n"
      } 
      if (!validate.validateMandText(text_release_name)) {
        alertText += ".Release Name\n"
      }
      if (!validate.validateMandTextOnly(text_release_name)) {
        alertText += ".Invalid Release Name\n"
      }
      if (!validate.validateDatePair(date_start_date)) {
        alertText += ".Start Date\n"
      } 
      if (!validate.validateDatePair(date_end_date)) {
        alertText += ".End Date\n"
      } 
      if (!validate.validateMandText(text_release_lead)) {
        alertText += ".Release Lead\n"
      }
      if (!validate.validateMandTextOnly(text_release_lead)) {
        alertText += ".Invalid Release Lead\n"
      }
      if (!validate.validateMandNumber(int_tc_id)) {
        alertText += ".Test Cycle Name\n"
      }
           


      if (alertText !== alertInitial) {
        Swal.fire({
          title: "Fill these fields:\n",
          html:
            '<pre style="display: flex;text-align: justify;flex-direction: column;align-items: center;line-height: 1.5">' +
            alertText +
            "</pre>",
          confirmButtonColor: Colors.primaryColor,
          width: Colors.width,
          allowOutsideClick: false,
        });
        return;
      }

      const data = {
        id: id,
        // task_3 : add more properties to data

        proj_id: int_proj_id,
        release_name: text_release_name,
        start_date:  moment(date_start_date).format("YYYY-MM-DD"),
        end_date: date_end_date === null ? null : moment(date_end_date).format("YYYY-MM-DD"),
        release_lead: text_release_lead,
        tc_id: int_tc_id,



        // lc_status_id: 1,
        is_active: is_active == false ? "inactive" : "active",
        created_by: username,
        tnnt_id: tnnt_id,
      };

      this.setState({ is_loading: true });
      SampleHelper.updateRecord(data)
        .then((data) => {
          if (data.code == 200) {
            this.props.getData();
            Swal.fire({
              text: "Record Id: " + id + " updated successfully.",
              confirmButtonColor: Colors.primaryColor,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.props.setVisibility(false);
            this.setState({ is_loading: true });
          } else if (data.code === 101) {
            Swal.fire({
              text: "Error",
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          } else {
            Swal.fire({
              text: data.msg,
              confirmButtonColor: Colors.red,
              width: Colors.width,
              allowOutsideClick: false,
            });
            this.setState({ is_loading: false });
          }
        })
        .catch((err) => {
          Swal.fire({
            text: err,
            confirmButtonColor: Colors.red,
            width: Colors.width,
            allowOutsideClick: false,
          });
          console.log(err);
        });
    } catch (err) {
      console.log(err);
    }
  }

  render() {
    const { setVisibility } = this.props;
    const {
      editable,
      is_loading,
      is_active,
      // task_2 : all declared variable add here

      int_proj_id,
      text_release_name,
      date_start_date,
      date_end_date,
      text_release_lead,
      int_tc_id,
      array_SdlcProject,
      proj_name,
      array_tscycle,


    } = this.state;

    return (
      <div className={styles.mainWrapper}>
        {is_loading && (
          <div className={"loadingWrapper"}>
            <div className={"innerLoadingWrapper"}>
              <div class="bouncing-loader">
                <div></div>
                <div></div>
                <div></div>
              </div>
            </div>
          </div>
        )}

        <div className={styles.wrapper} onClick={(e) => e.stopPropagation()}>
          <img
            src="/assets/close-red.png"
            className={styles.closeButton}
            onClick={() => setVisibility(false)}
          />
          <div>
            <p className={styles.title}>
              {editable == undefined ? "Create Record" : editable ? "Update Record" : "View Record"}
            </p>
            {/*// task_4 : build logic per column and specific to data type.*/}
                 
          <div className={styles.divMain2}>
           <fieldset className={styles.fieldsetWrapper}>
           <legend className={styles.legendsWrapper1}>Basic Details</legend>
          

           <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
  
  {/* Project Name Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <label style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
        Project Name:
        <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
      </label>
      {editable !== false ? (
        <select
          value={int_proj_id === undefined ? 0 : int_proj_id}
          onChange={(e) => this.setState({ int_proj_id: e.target.value })}
          style={{ borderColor: 'blue', backgroundColor: 'white', width: '100%', padding: '10px', boxSizing: 'border-box', fontSize: '16px', borderWidth: '1px', borderStyle: 'solid' }}
        >
          <option value={0} disabled>Select Project</option>
          {array_SdlcProject.map((s) => (
            <option value={s.proj_id} key={s.proj_id}>{s.proj_name}</option>
          ))}
        </select>
      ) : (
        <div style={{ flexGrow: 1 }}>
          <p>{proj_name}</p>
        </div>
      )}
    </div>
  </div>

  {/* Release Name Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <label style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
        Release Name:
        <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
      </label>
      {editable !== false ? (
        <input
          type="text"
          value={text_release_name}
          onChange={(e) => this.setState({ text_release_name: e.target.value })}
          style={{ borderColor: 'blue', backgroundColor: 'white', width: '100%', padding: '10px', boxSizing: 'border-box', fontSize: '16px', borderWidth: '1px', borderStyle: 'solid' }}
        />
      ) : (
        <div style={{ flexGrow: 1 }}>
          <p>{text_release_name}</p>
        </div>
      )}
    </div>
    {editable !== false && (
      <div style={{ textAlign: 'right', marginTop: '5px', fontWeight: 'bold', color: '#555' }}>
        ({text_release_name ? text_release_name.length : 0}/60)
      </div>
    )}
  </div>

  {/* Start Date Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
  <div style={{ display: 'flex', alignItems: 'center' }}>
    <label style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
      Start Date:
      <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
    </label>
    {editable !== false ? (
      <div style={{ position: 'relative', flexGrow: 1 }}>
        <input
         type="date"
          className={styles.date}
          dateFormat="dd-MM-yyyy"
          selected={date_start_date}
          onChange={(e) => this.setState({ date_start_date: e })}
          style={{
          flexGrow: 1,
           padding: '10px',
           fontSize: '16px',
           borderRadius: '5px',
           border: '1px solid #ccc',
           backgroundColor: 'white',
           width: '100%',
           boxSizing: 'border-box',
           borderColor: 'blue'
          }}
        />
        {/* You can add a calendar icon here if needed, similar to how we did earlier */}
      </div>
    ) : (
      <div style={{ flexGrow: 1 }}>
        <p>{date_start_date ? moment(date_start_date).format("DD-MMM-YYYY") : ""}</p>
      </div>
    )}
  </div>
</div>



            


  {/* End Date Section */}
 <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
  <div style={{ display: 'flex', alignItems: 'center' }}>
    <label style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
      End Date:
      <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
    </label>
    {editable !== false ? (
      <div style={{ position: 'relative', flexGrow: 1 }}>
        <input
         type="date"
          className={styles.date}
          dateFormat="dd-MM-yyyy"
          selected={date_end_date}
          onChange={(e) => this.setState({ date_end_date: e })}
          style={{
            flexGrow: 1,
            padding: '10px',
            fontSize: '16px',
            borderRadius: '5px',
            border: '1px solid #ccc',
            backgroundColor: 'white',
            width: '100%',
            boxSizing: 'border-box',
            borderColor: 'blue'
          }}
        />
      </div>
    ) : (
      <div style={{ flexGrow: 1 }}>
        <p>{date_end_date ? moment(date_end_date).format("DD-MMM-YYYY") : ""}</p>
      </div>
    )}
  </div>
</div>

  {/* Release Lead Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <label style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
        Release Lead:
        <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
      </label>
      {editable !== false ? (
        <input
          type="text"
          value={text_release_lead}
          onChange={(e) => this.setState({ text_release_lead: e.target.value })}
          style={{ borderColor: 'blue', backgroundColor: 'white', width: '100%', padding: '10px', boxSizing: 'border-box', fontSize: '16px', borderWidth: '1px', borderStyle: 'solid' }}
        />
      ) : (
        <div style={{ flexGrow: 1 }}>
          <p>{text_release_lead}</p>
        </div>
      )}
    </div>
    {editable !== false && (
      <div style={{ textAlign: 'right', marginTop: '5px', fontWeight: 'bold', color: '#555' }}>
        ({text_release_lead ? text_release_lead.length : 0}/60)
      </div>
    )}
  </div>

  {/* Test Cycle Name Section */}
  <div style={{ marginBottom: '30px', display: 'flex', flexDirection: 'column' }}>
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <label style={{ marginRight: '10px', whiteSpace: 'nowrap', width: '150px' }}>
        Cycle Name:
        <span style={{ color: 'red', marginLeft: '3px', fontSize: '20px' }}>*</span>
      </label>
      {editable !== false ? (
        <select
          value={int_tc_id === undefined ? 0 : int_tc_id}
          onChange={(e) => this.setState({ int_tc_id: e.target.value })}
          style={{ borderColor: 'blue', backgroundColor: 'white', width: '100%', padding: '10px', boxSizing: 'border-box', fontSize: '16px', borderWidth: '1px', borderStyle: 'solid' }}
        >
          <option value={0} disabled>Select Cycle</option>
          {array_tscycle.map((s) => (
            <option value={s.id} key={s.id}>{s.name}</option>
          ))}
        </select>
      ) : (
        <div style={{ flexGrow: 1 }}>
          <p>{int_tc_id}</p>
        </div>
      )}
    </div>
  </div>
</div>

                
                
                
                  </fieldset>
                            
                 </div>

            <div className={styles.inputAlignment}>
              <p className={`mandatory`}><span style={{ color: "red", marginLeft: "3px", fontSize: "15px" }}>* are mandatory fields</span></p>
            </div>
            <div
              className={styles.inputAlignment}
              style={{
                justifyContent: "space-around",
                display: "flex",
              }}
            >
              {editable !== undefined && (
                <div>
                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={is_active}
                      onChange={(e) =>
                        this.setState({
                          is_active: e.target.checked,
                        })
                      }
                      disabled={editable == false}
                    />
                    <span className="slider round"></span>
                  </label>
                  <p className={styles.statusText}>
                    {is_active ? "Active" : "Inactive"}
                  </p>
                </div>
              )}
            </div>
            {editable != false && (
              <div className={styles.button}>
                <button
                  className={`button`}
                  onClick={() =>
                    editable == undefined
                      ? this.insertRecord()
                      : editable && this.updateRecord()
                  }
                >
                  {editable == undefined ? "Create" : editable && "Update"}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
}